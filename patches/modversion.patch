diff --git src/engine/main.cpp src/engine/main.cpp
index d79944d..9811024 100644
--- src/engine/main.cpp
+++ src/engine/main.cpp
@@ -1330,6 +1330,8 @@

     identflags |= IDF_PERSIST;

+    migratep1xbraten();
+
     logoutf("init: mainloop");

     if(execfile("once.cfg", false)) remove(findfile("once.cfg", "rb"));
diff --git src/engine/server.cpp src/engine/server.cpp
index d79944d..9811024 100644
--- src/engine/server.cpp
+++ src/engine/server.cpp
@@ -979,6 +979,7 @@ void initserver(bool listen, bool dedicated)
 #ifdef WIN32
         setupwindow("Cube 2: Sauerbraten server");
 #endif
+        migratep1xbraten();
     }

     execfile("server-init.cfg", false);
Index: src/p1xbraten/version.cpp
===================================================================
--- src/p1xbraten/version.cpp	(nonexistent)
+++ src/p1xbraten/version.cpp	(working copy)
@@ -0,0 +1,22 @@
+#include "cube.h"
+
+MOD(SVARP, p1xbratenversion, "");
+
+void lockversion()
+{
+    ident *id = getident("p1xbratenversion");
+    if(!id) { conoutf(CON_ERROR, "p1xbratenversion is undefined!"); return; }
+    if(!(id->flags&IDF_READONLY)) id->flags += IDF_READONLY;
+}
+
+void migratep1xbraten()
+{
+    const char *version = "<git-dev>"; // replaced in CI build
+    if(naturalsort(p1xbratenversion, version) == -1)
+    {
+        // we're newer, run migrations
+    }
+    setsvar("p1xbratenversion", version);
+    lockversion();
+    conoutf("p1xbraten version: %s", version);
+}
Index: src/fpsgame/client.cpp
===================================================================
--- src/fpsgame/client.cpp	(revision 6502)
+++ src/fpsgame/client.cpp	(working copy)
@@ -308,6 +308,14 @@
     }
     ICOMMAND(getclienticon, "i", (int *cn), result(getclienticon(*cn)));

+    const char *getclientp1xbratenversion(int cn)
+    {
+        fpsent *d = getclient(cn);
+        if(d==player1) return p1xbratenversion;
+        return d ? d->p1xbratenversion.tostring() : "";
+    }
+    ICOMMAND(getclientp1xbratenversion, "i", (int *cn), result(getclientp1xbratenversion(*cn)));
+
     bool ismaster(int cn)
     {
         fpsent *d = getclient(cn);
@@ -1086,6 +1094,7 @@
             sendstring("", p);
         }
         sendclientpacket(p.finalize(), 1);
+        broadcastp1xbratenversion();
     }

     void updatepos(fpsent *d)
@@ -1406,6 +1415,7 @@
                 {
                     conoutf("\f0join:\f7 %s", colorname(d, text));
                     if(needclipboard >= 0) needclipboard++;
+                    broadcastp1xbratenversion();
                 }
                 copystring(d->name, text, MAXNAMELEN+1);
                 getstring(text, p);
@@ -1433,6 +1443,7 @@
                 int model = getint(p);
                 if(d)
                 {
+                    if(setp1xbratenversion(d, model)) break;
                     d->playermodel = model;
                     if(d->ragdoll) cleanragdoll(d);
                 }
Index: src/fpsgame/game.h
===================================================================
--- src/fpsgame/game.h	(revision 6502)
+++ src/fpsgame/game.h	(working copy)
@@ -557,10 +557,11 @@
     int playermodel;
     ai::aiinfo *ai;
     int ownernum, lastnode;
+    semver p1xbratenversion;

     vec muzzle;

-    fpsent() : weight(100), clientnum(-1), privilege(PRIV_NONE), lastupdate(0), plag(0), ping(0), lifesequence(0), respawned(-1), suicided(-1), lastpain(0), attacksound(-1), attackchan(-1), idlesound(-1), idlechan(-1), frags(0), flags(0), deaths(0), totaldamage(0), totalshots(0), edit(NULL), smoothmillis(-1), playermodel(-1), ai(NULL), ownernum(-1), muzzle(-1, -1, -1)
+    fpsent() : weight(100), clientnum(-1), privilege(PRIV_NONE), lastupdate(0), plag(0), ping(0), lifesequence(0), respawned(-1), suicided(-1), lastpain(0), attacksound(-1), attackchan(-1), idlesound(-1), idlechan(-1), frags(0), flags(0), deaths(0), totaldamage(0), totalshots(0), edit(NULL), smoothmillis(-1), playermodel(-1), ai(NULL), ownernum(-1), p1xbratenversion(0, 0, 0), muzzle(-1, -1, -1)
     {
         name[0] = team[0] = info[0] = 0;
         respawn();
@@ -764,6 +765,8 @@
     extern void forceintermission();
     extern void c2sinfo(bool force = false);
     extern void sendposition(fpsent *d, bool reliable = false);
+    extern void broadcastp1xbratenversion();
+    extern bool setp1xbratenversion(fpsent *d, int version);

     // monster
     struct monster;
Index: src/p1xbraten/detection.cpp
===================================================================
--- src/p1xbraten/detection.cpp	(nonexistent)
+++ src/p1xbraten/detection.cpp	(working copy)
@@ -0,0 +1,23 @@
+#include "game.h"
+
+namespace game {
+    #define P1XBRATEN_VERSION_PREFIX (uchar(69))
+
+    MOD(VARP, enablep1xbratendetection, 0, 1, 1);
+
+    void broadcastp1xbratenversion()
+    {
+        if(!enablep1xbratendetection) return;
+        static const semver v(p1xbratenversion);
+        addmsg(N_SWITCHMODEL, "ri", P1XBRATEN_VERSION_PREFIX<<24 | int(v.maj) << 16 | int(v.min) << 8 | int(v.patch));
+        addmsg(N_SWITCHMODEL, "ri", player1->playermodel);
+    }
+
+    bool setp1xbratenversion(fpsent *d, int version)
+    {
+        if((version>>24)!=P1XBRATEN_VERSION_PREFIX) return false;
+        if(!enablep1xbratendetection) return true;
+        d->p1xbratenversion = semver((version>>16)&0xF, (version>>8)&0xF, version&0xF);
+        return true;
+    }
+}
Index: src/shared/iengine.h
===================================================================
--- src/shared/iengine.h	(revision 6502)
+++ src/shared/iengine.h	(working copy)
@@ -581,3 +581,7 @@
 extern void g3d_resetcursor();
 extern void g3d_limitscale(float scale);

+// p1xbraten
+extern char *p1xbratenversion;
+extern int naturalsort(const char *a, const char *b); // from command.cpp
+extern void migratep1xbraten();
Index: src/shared/tools.h
===================================================================
--- src/shared/tools.h	(revision 6502)
+++ src/shared/tools.h	(working copy)
@@ -1404,5 +1404,45 @@
     bool check(enet_uint32 host) const { return (host & mask) == ip; }
 };

+struct semver {
+    uchar maj = 0, min = 0, patch = 0;
+
+    semver(uchar maj, uchar min, uchar patch) : maj(maj), min(min), patch(patch)
+    {
+        //
+    }
+
+    semver(const char *version)
+    {
+        char *v = newstring(version);
+        const char *numstart = v;
+
+        while(isdigit(*v)) v++;
+        if(*v!='.') return;
+        *v = '\0';
+        maj = uchar(strtoul(numstart, NULL, 0));
+        *v = '.';
+        v++;
+
+        numstart = v;
+        while(isdigit(*v)) v++;
+        if(*v!='.') return;
+        *v = '\0';
+        min = uchar(strtoul(numstart, NULL, 0));
+        *v = '.';
+        v++;
+        if(!*v) return;
+
+        numstart = v;
+        patch = uchar(strtoul(numstart, NULL, 0));
+    }
+
+    char *tostring()
+    {
+        defformatstring(s, "%d.%d.%d", maj, min, patch);
+        return newstring(s);
+    }
+};
+
 #endif

