diff --git src/engine/menus.cpp src/engine/menus.cpp
index 8e18447..ab081be 100644
--- src/engine/menus.cpp
+++ src/engine/menus.cpp
@@ -551,12 +551,20 @@ void newgui(char *name, char *contents, char *header, char *init)

 menu *guiserversmenu = NULL;

+namespace game
+{
+    extern int usep1xbratenmenus;
+    namespace mod { extern const char *showservers(g3d_gui *cgui, uint *header, int pagemin, int pagemax); }
+}
+
 void guiservers(uint *header, int *pagemin, int *pagemax)
 {
     extern const char *showservers(g3d_gui *cgui, uint *header, int pagemin, int pagemax);
     if(cgui)
     {
-        const char *command = showservers(cgui, header, *pagemin, *pagemax > 0 ? *pagemax : INT_MAX);
+        const char *command = game::usep1xbratenmenus ?
+            game::mod::showservers(cgui, header, *pagemin, *pagemax > 0 ? *pagemax : INT_MAX) :
+            showservers(cgui, header, *pagemin, *pagemax > 0 ? *pagemax : INT_MAX);
         if(command)
         {
             updatelater.add().schedule(command);
diff --git src/engine/serverbrowser.cpp src/engine/serverbrowser.cpp
index c3e2068..982a38d 100644
--- src/engine/serverbrowser.cpp
+++ src/engine/serverbrowser.cpp
@@ -214,143 +214,7 @@ int connectwithtimeout(ENetSocket sock, const char *hostname, const ENetAddress
     return -1;
 }

-struct pingattempts
-{
-    enum { MAXATTEMPTS = 2 };
-
-    int offset, attempts[MAXATTEMPTS];
-
-    pingattempts() : offset(0) { clearattempts(); }
-
-    void clearattempts() { memset(attempts, 0, sizeof(attempts)); }
-
-    void setoffset() { offset = 1 + rnd(0xFFFFFF); }
-
-    int encodeping(int millis)
-    {
-        millis += offset;
-        return millis ? millis : 1;
-    }
-
-    int decodeping(int val)
-    {
-        return val - offset;
-    }
-
-    int addattempt(int millis)
-    {
-        int val = encodeping(millis);
-        loopk(MAXATTEMPTS-1) attempts[k+1] = attempts[k];
-        attempts[0] = val;
-        return val;
-    }
-
-    bool checkattempt(int val, bool del = true)
-    {
-        if(val) loopk(MAXATTEMPTS) if(attempts[k] == val)
-        {
-            if(del) attempts[k] = 0;
-            return true;
-        }
-        return false;
-    }
-
-};
-
-enum { UNRESOLVED = 0, RESOLVING, RESOLVED };
-
-struct serverinfo : pingattempts
-{
-    enum
-    {
-        WAITING = INT_MAX,
-
-        MAXPINGS = 3
-    };
-
-    string name, map, sdesc;
-    int port, numplayers, resolved, ping, lastping, nextping;
-    int pings[MAXPINGS];
-    vector<int> attr;
-    ENetAddress address;
-    bool keep;
-    const char *password;
-
-    serverinfo()
-        : port(-1), numplayers(0), resolved(UNRESOLVED), keep(false), password(NULL)
-    {
-        name[0] = map[0] = sdesc[0] = '\0';
-        clearpings();
-        setoffset();
-    }
-
-    ~serverinfo()
-    {
-        DELETEA(password);
-    }
-
-    void clearpings()
-    {
-        ping = WAITING;
-        loopk(MAXPINGS) pings[k] = WAITING;
-        nextping = 0;
-        lastping = -1;
-        clearattempts();
-    }
-
-    void cleanup()
-    {
-        clearpings();
-        attr.setsize(0);
-        numplayers = 0;
-    }
-
-    void reset()
-    {
-        lastping = -1;
-    }
-
-    void checkdecay(int decay)
-    {
-        if(lastping >= 0 && totalmillis - lastping >= decay)
-            cleanup();
-        if(lastping < 0) lastping = totalmillis;
-    }
-
-    void calcping()
-    {
-        int numpings = 0, totalpings = 0;
-        loopk(MAXPINGS) if(pings[k] != WAITING) { totalpings += pings[k]; numpings++; }
-        ping = numpings ? totalpings/numpings : WAITING;
-    }
-
-    void addping(int rtt, int millis)
-    {
-        if(millis >= lastping) lastping = -1;
-        pings[nextping] = rtt;
-        nextping = (nextping+1)%MAXPINGS;
-        calcping();
-    }
-
-    static bool compare(serverinfo *a, serverinfo *b)
-    {
-        bool ac = server::servercompatible(a->name, a->sdesc, a->map, a->ping, a->attr, a->numplayers),
-             bc = server::servercompatible(b->name, b->sdesc, b->map, b->ping, b->attr, b->numplayers);
-        if(ac > bc) return true;
-        if(bc > ac) return false;
-        if(a->keep > b->keep) return true;
-        if(a->keep < b->keep) return false;
-        if(a->numplayers < b->numplayers) return false;
-        if(a->numplayers > b->numplayers) return true;
-        if(a->ping > b->ping) return false;
-        if(a->ping < b->ping) return true;
-        int cmp = strcmp(a->name, b->name);
-        if(cmp != 0) return cmp < 0;
-        if(a->port < b->port) return true;
-        if(a->port > b->port) return false;
-        return false;
-    }
-};
+#include "serverbrowser.h"

 vector<serverinfo *> servers;
 ENetSocket pingsock = ENET_SOCKET_NULL;
diff --git src/p1xbraten/serverbrowser.cpp src/p1xbraten/serverbrowser.cpp
new file mode 100644
index 0000000..e1ad208
--- /dev/null
+++ src/p1xbraten/serverbrowser.cpp
@@ -0,0 +1,198 @@
+#include "game.h"
+#include "serverbrowser.h"
+
+extern vector<serverinfo *> servers;
+extern void refreshservers();
+extern serverinfo *selectedserver;
+
+namespace game { namespace mod
+{
+    static const char * const names[] = { "ping", "players", "slots", "mode", "map", "time", "master", "host", "port", "description" };
+    static const float struts[]       = {      0,         0,       0,  12.5f,    14,      0,        0,     14,      0,         24.5f };
+    static const bool right[]         = {   true,      true,    true,  false, false,  false,    false,  false,   true,         false };
+
+    MOD(SVAR, filterservers, "");
+
+    bool servermatches(serverinfo *si)
+    {
+        return cubecasefind(si->sdesc, filterservers) ||
+            cubecasefind(si->map, filterservers) ||
+            (si->attr.length()>=2 && cubecasefind(server::modename(si->attr[1], ""), filterservers));
+    }
+
+    #define COLUMNTOGGLE(col) MOD(VARP, serverbrowsershow##col, 0, 1, 1)
+
+    COLUMNTOGGLE(ping); COLUMNTOGGLE(players); COLUMNTOGGLE(slots); COLUMNTOGGLE(mode); COLUMNTOGGLE(map);
+    COLUMNTOGGLE(time); COLUMNTOGGLE(master);  COLUMNTOGGLE(host);  COLUMNTOGGLE(port); COLUMNTOGGLE(description);
+
+    #undef COLUMNTOGGLE
+
+    #define justified(elem, right) \
+        { \
+            /* pushlist to go horizontal, spring to push right, pushlist again to get vertical list dir back, so mergehits works */ \
+            if((right)) { g->pushlist(); g->spring(); g->pushlist(); } \
+            elem; \
+            if((right)) { g->poplist(); g->poplist(); } \
+        }
+
+    bool serverinfostartcolumn(g3d_gui *g, int i)
+    {
+        if(size_t(i) >= sizeof(names)/sizeof(names[0])) return false;
+        static string togglename; formatstring(togglename, "serverbrowsershow%s", names[i]);
+        if(!getvar(togglename)) return false;
+        if(i) g->space(2);
+        g->pushlist();
+        justified(g->text(names[i], COL_GRAY, NULL), right[i]);
+        if(struts[i]) g->strut(struts[i]);
+        g->mergehits(true);
+        return true;
+    }
+
+    #define handlemouse(elem)    int hit = elem; if(hit&G3D_UP) return true
+    #define leftjustified(elem)  justified(handlemouse(elem), false)
+    #define rightjustified(elem) justified(handlemouse(elem), true)
+
+    bool serverinfoentryincomplete(g3d_gui *g, int i, const char *name, int port, const char *sdesc, const char *map, int ping, const vector<int> &attr, int np)
+    {
+        switch(i)
+        {
+            case 0:
+            case 1:
+            case 2:
+            case 3:
+            case 4:
+            case 5:
+            case 6:
+                leftjustified(g->button(" ", COL_WHITE))
+                break;
+
+            case 7:
+                leftjustified(g->buttonf("%s", COL_WHITE, NULL, name))
+                break;
+
+            case 8:
+                rightjustified(g->buttonf("%d", COL_WHITE, NULL, port))
+                break;
+
+            case 9:
+                if(ping < 0) leftjustified(g->button(sdesc, COL_WHITE))
+                else leftjustified(g->buttonf("[%s protocol]", COL_WHITE, NULL, attr.empty() ? "unknown" : (attr[0] < PROTOCOL_VERSION ? "older" : "newer")))
+                break;
+        }
+        return false;
+    }
+
+    bool serverinfoentry(g3d_gui *g, int i, const char *name, int port, const char *sdesc, const char *map, int ping, const vector<int> &attr, int np)
+    {
+        if(ping < 0 || attr.empty() || attr[0]!=PROTOCOL_VERSION) return serverinfoentryincomplete(g, i, name, port, sdesc, map, ping, attr, np);
+
+        switch(i)
+        {
+            case 0:
+                rightjustified(g->buttonf("%d", COL_WHITE, NULL, ping))
+                break;
+
+            case 1:
+                rightjustified(g->buttonf(attr.length()>=4 && np >= attr[3] ? "\f3%d" : "%d", COL_WHITE, NULL, np))
+                break;
+
+            case 2:
+                if(attr.length()>=4) rightjustified(g->buttonf(np >= attr[3] ? "\f3%d" : "%d", COL_WHITE, NULL, attr[3]))
+                else rightjustified(g->button(" ", COL_WHITE))
+                break;
+
+            case 3:
+                leftjustified(g->buttonf("%s", COL_WHITE, NULL, attr.length()>=2 ? server::modename(attr[1], "") : ""))
+                break;
+
+            case 4:
+                leftjustified(g->buttonf("%.25s", COL_WHITE, NULL, map))
+                break;
+
+            case 5:
+                if(attr.length()>=3 && attr[2] > 0)
+                {
+                    int secs = clamp(attr[2], 0, 59*60+59),
+                        mins = secs/60;
+                    secs %= 60;
+                    leftjustified(g->buttonf("%d:%02d", COL_WHITE, NULL, mins, secs))
+                }
+                else leftjustified(g->button(" ", COL_WHITE))
+                break;
+
+            case 6:
+                leftjustified(g->buttonf("%s%s", COL_WHITE, NULL, attr.length()>=5 ? mastermodecolor(attr[4], "") : "", attr.length()>=5 ? server::mastermodename(attr[4], "") : ""))
+                break;
+
+            case 7:
+                leftjustified(g->buttonf("%s", COL_WHITE, NULL, name))
+                break;
+
+            case 8:
+                rightjustified(g->buttonf("%d", COL_WHITE, NULL, port))
+                break;
+
+            case 9:
+                leftjustified(g->buttonf("%.25s", COL_WHITE, NULL, sdesc))
+                break;
+        }
+
+        return false;
+    }
+
+    #undef handlemouse
+    #undef leftjustified
+    #undef rightjustified
+    #undef justified
+
+    void serverinfoendcolumn(g3d_gui *g, int i)
+    {
+        g->mergehits(false);
+        g->column(i);
+        g->poplist();
+    }
+
+    const char *showservers(g3d_gui *cgui, uint *header, int pagemin, int pagemax)
+    {
+        refreshservers();
+        static vector<serverinfo *> filteredservers;
+        filteredservers.shrink(0);
+        loopv(servers) if(servermatches(servers[i])) filteredservers.add(servers[i]);
+        if(filteredservers.empty())
+        {
+            if(header) execute(header);
+            cgui->title("no servers", COL_ORANGE);
+            return NULL;
+        }
+        serverinfo *sc = NULL;
+        for(int start = 0; start < filteredservers.length();)
+        {
+            if(start > 0) cgui->tab();
+            if(header) execute(header);
+            int end = filteredservers.length();
+            cgui->pushlist();
+            loopi(sizeof(names)/sizeof(names[0]))
+            {
+                if(!serverinfostartcolumn(cgui, i)) continue;
+                for(int j = start; j < end; j++)
+                {
+                    if(!i && j+1 - start > pagemin && (j+1 - start >= pagemax || cgui->shouldtab())) { end = j; break; }
+                    serverinfo &si = *filteredservers[j];
+                    const char *sdesc = si.sdesc;
+                    if(si.address.host == ENET_HOST_ANY) sdesc = "[unknown host]";
+                    else if(si.ping == serverinfo::WAITING) sdesc = "[waiting for response]";
+                    if(serverinfoentry(cgui, i, si.name, si.port, sdesc, si.map, sdesc == si.sdesc ? si.ping : -1, si.attr, si.numplayers))
+                        sc = &si;
+                }
+                if(end-start < pagemin) cgui->space(pagemin-(end-start));
+                serverinfoendcolumn(cgui, i);
+            }
+            cgui->poplist();
+            start = end;
+        }
+        if(selectedserver || !sc) return NULL;
+        selectedserver = sc;
+        return "connectselected";
+    }
+
+} }
diff --git src/p1xbraten/serverbrowser.h src/p1xbraten/serverbrowser.h
new file mode 100644
index 0000000..f5297f8
--- /dev/null
+++ src/p1xbraten/serverbrowser.h
@@ -0,0 +1,139 @@
+#include "engine.h"
+
+struct pingattempts
+{
+    enum { MAXATTEMPTS = 2 };
+
+    int offset, attempts[MAXATTEMPTS];
+
+    pingattempts() : offset(0) { clearattempts(); }
+
+    void clearattempts() { memset(attempts, 0, sizeof(attempts)); }
+
+    void setoffset() { offset = 1 + rnd(0xFFFFFF); }
+
+    int encodeping(int millis)
+    {
+        millis += offset;
+        return millis ? millis : 1;
+    }
+
+    int decodeping(int val)
+    {
+        return val - offset;
+    }
+
+    int addattempt(int millis)
+    {
+        int val = encodeping(millis);
+        loopk(MAXATTEMPTS-1) attempts[k+1] = attempts[k];
+        attempts[0] = val;
+        return val;
+    }
+
+    bool checkattempt(int val, bool del = true)
+    {
+        if(val) loopk(MAXATTEMPTS) if(attempts[k] == val)
+        {
+            if(del) attempts[k] = 0;
+            return true;
+        }
+        return false;
+    }
+
+};
+
+enum { UNRESOLVED = 0, RESOLVING, RESOLVED };
+
+struct serverinfo : pingattempts
+{
+    enum
+    {
+        WAITING = INT_MAX,
+
+        MAXPINGS = 3
+    };
+
+    string name, map, sdesc;
+    int port, numplayers, resolved, ping, lastping, nextping;
+    int pings[MAXPINGS];
+    vector<int> attr;
+    ENetAddress address;
+    bool keep;
+    const char *password;
+
+    serverinfo()
+        : port(-1), numplayers(0), resolved(UNRESOLVED), keep(false), password(NULL)
+    {
+        name[0] = map[0] = sdesc[0] = '\0';
+        clearpings();
+        setoffset();
+    }
+
+    ~serverinfo()
+    {
+        DELETEA(password);
+    }
+
+    void clearpings()
+    {
+        ping = WAITING;
+        loopk(MAXPINGS) pings[k] = WAITING;
+        nextping = 0;
+        lastping = -1;
+        clearattempts();
+    }
+
+    void cleanup()
+    {
+        clearpings();
+        attr.setsize(0);
+        numplayers = 0;
+    }
+
+    void reset()
+    {
+        lastping = -1;
+    }
+
+    void checkdecay(int decay)
+    {
+        if(lastping >= 0 && totalmillis - lastping >= decay)
+            cleanup();
+        if(lastping < 0) lastping = totalmillis;
+    }
+
+    void calcping()
+    {
+        int numpings = 0, totalpings = 0;
+        loopk(MAXPINGS) if(pings[k] != WAITING) { totalpings += pings[k]; numpings++; }
+        ping = numpings ? totalpings/numpings : WAITING;
+    }
+
+    void addping(int rtt, int millis)
+    {
+        if(millis >= lastping) lastping = -1;
+        pings[nextping] = rtt;
+        nextping = (nextping+1)%MAXPINGS;
+        calcping();
+    }
+
+    static bool compare(serverinfo *a, serverinfo *b)
+    {
+        bool ac = server::servercompatible(a->name, a->sdesc, a->map, a->ping, a->attr, a->numplayers),
+             bc = server::servercompatible(b->name, b->sdesc, b->map, b->ping, b->attr, b->numplayers);
+        if(ac > bc) return true;
+        if(bc > ac) return false;
+        if(a->keep > b->keep) return true;
+        if(a->keep < b->keep) return false;
+        if(a->numplayers < b->numplayers) return false;
+        if(a->numplayers > b->numplayers) return true;
+        if(a->ping > b->ping) return false;
+        if(a->ping < b->ping) return true;
+        int cmp = strcmp(a->name, b->name);
+        if(cmp != 0) return cmp < 0;
+        if(a->port < b->port) return true;
+        if(a->port > b->port) return false;
+        return false;
+    }
+};
