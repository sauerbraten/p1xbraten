diff --git src/fpsgame/game.h src/fpsgame/game.h
index 64a92ad..02277f9 100644
--- src/fpsgame/game.h
+++ src/fpsgame/game.h
@@ -877,6 +877,305 @@ namespace game

 namespace server
 {
+    struct clientinfo;
+
+    struct gameevent
+    {
+        virtual ~gameevent() {}
+
+        virtual bool flush(clientinfo *ci, int fmillis);
+        virtual void process(clientinfo *ci) {}
+
+        virtual bool keepable() const { return false; }
+    };
+    extern vector<gameevent *> events;
+
+    struct timedevent : gameevent
+    {
+        int millis;
+
+        bool flush(clientinfo *ci, int fmillis);
+    };
+
+    struct hitinfo
+    {
+        int target;
+        int lifesequence;
+        int rays;
+        float dist;
+        vec dir;
+    };
+
+    struct shotevent : timedevent
+    {
+        int id, gun;
+        vec from, to;
+        vector<hitinfo> hits;
+
+        void process(clientinfo *ci);
+    };
+
+    struct explodeevent : timedevent
+    {
+        int id, gun;
+        vector<hitinfo> hits;
+
+        bool keepable() const { return true; }
+
+        void process(clientinfo *ci);
+    };
+
+    struct suicideevent : gameevent
+    {
+        void process(clientinfo *ci);
+    };
+
+    struct pickupevent : gameevent
+    {
+        int ent;
+
+        void process(clientinfo *ci);
+    };
+
+    template <int N>
+    struct projectilestate
+    {
+        int projs[N];
+        int numprojs;
+
+        projectilestate() : numprojs(0) {}
+
+        void reset() { numprojs = 0; }
+
+        void add(int val)
+        {
+            if(numprojs>=N) numprojs = 0;
+            projs[numprojs++] = val;
+        }
+
+        bool remove(int val)
+        {
+            loopi(numprojs) if(projs[i]==val)
+            {
+                projs[i] = projs[--numprojs];
+                return true;
+            }
+            return false;
+        }
+    };
+
+    static const int DEATHMILLIS = 300;
+
+    struct gamestate : fpsstate
+    {
+        vec o;
+        int state, editstate;
+        int lastdeath, deadflush, lastspawn, lifesequence;
+        int lastshot;
+        projectilestate<8> rockets, grenades;
+        int frags, flags, deaths, teamkills, shotdamage, damage, tokens;
+        int lasttimeplayed, timeplayed;
+        float effectiveness;
+
+        gamestate() : state(CS_DEAD), editstate(CS_DEAD), lifesequence(0) {}
+
+        bool isalive(int gamemillis)
+        {
+            return state==CS_ALIVE || (state==CS_DEAD && gamemillis - lastdeath <= DEATHMILLIS);
+        }
+
+        bool waitexpired(int gamemillis)
+        {
+            return gamemillis - lastshot >= gunwait;
+        }
+
+        void reset()
+        {
+            if(state!=CS_SPECTATOR) state = editstate = CS_DEAD;
+            maxhealth = 100;
+            rockets.reset();
+            grenades.reset();
+
+            timeplayed = 0;
+            effectiveness = 0;
+            frags = flags = deaths = teamkills = shotdamage = damage = tokens = 0;
+
+            lastdeath = 0;
+
+            respawn();
+        }
+
+        void respawn()
+        {
+            fpsstate::respawn();
+            o = vec(-1e10f, -1e10f, -1e10f);
+            deadflush = 0;
+            lastspawn = -1;
+            lastshot = 0;
+            tokens = 0;
+        }
+
+        void reassign()
+        {
+            respawn();
+            rockets.reset();
+            grenades.reset();
+        }
+    };
+
+    extern int gamemillis, nextexceeded;
+
+    struct clientinfo
+    {
+        int clientnum, ownernum, connectmillis, sessionid, overflow;
+        string name, team, mapvote;
+        int playermodel;
+        int modevote;
+        int privilege;
+        bool connected, local, timesync;
+        int gameoffset, lastevent, pushed, exceeded;
+        gamestate state;
+        vector<gameevent *> events;
+        vector<uchar> position, messages;
+        uchar *wsdata;
+        int wslen;
+        vector<clientinfo *> bots;
+        int ping, aireinit;
+        string clientmap;
+        int mapcrc;
+        bool warned, gameclip;
+        ENetPacket *getdemo, *getmap, *clipboard;
+        int lastclipboard, needclipboard;
+        int connectauth;
+        uint authreq;
+        string authname, authdesc;
+        void *authchallenge;
+        int authkickvictim;
+        char *authkickreason;
+
+        clientinfo() : getdemo(NULL), getmap(NULL), clipboard(NULL), authchallenge(NULL), authkickreason(NULL) { reset(); }
+        ~clientinfo() { events.deletecontents(); cleanclipboard(); cleanauth(); }
+
+        void addevent(gameevent *e)
+        {
+            if(state.state==CS_SPECTATOR || events.length()>100) delete e;
+            else events.add(e);
+        }
+
+        enum
+        {
+            PUSHMILLIS = 3000
+        };
+
+        int calcpushrange()
+        {
+            ENetPeer *peer = getclientpeer(ownernum);
+            return PUSHMILLIS + (peer ? peer->roundTripTime + peer->roundTripTimeVariance : ENET_PEER_DEFAULT_ROUND_TRIP_TIME);
+        }
+
+        bool checkpushed(int millis, int range)
+        {
+            return millis >= pushed - range && millis <= pushed + range;
+        }
+
+        void scheduleexceeded()
+        {
+            if(state.state!=CS_ALIVE || !exceeded) return;
+            int range = calcpushrange();
+            if(!nextexceeded || exceeded + range < nextexceeded) nextexceeded = exceeded + range;
+        }
+
+        void setexceeded()
+        {
+            if(state.state==CS_ALIVE && !exceeded && !checkpushed(gamemillis, calcpushrange())) exceeded = gamemillis;
+            scheduleexceeded();
+        }
+
+        void setpushed()
+        {
+            pushed = max(pushed, gamemillis);
+            if(exceeded && checkpushed(exceeded, calcpushrange())) exceeded = 0;
+        }
+
+        bool checkexceeded()
+        {
+            return state.state==CS_ALIVE && exceeded && gamemillis > exceeded + calcpushrange();
+        }
+
+        void mapchange()
+        {
+            mapvote[0] = 0;
+            modevote = INT_MAX;
+            state.reset();
+            events.deletecontents();
+            overflow = 0;
+            timesync = false;
+            lastevent = 0;
+            exceeded = 0;
+            pushed = 0;
+            clientmap[0] = '\0';
+            mapcrc = 0;
+            warned = false;
+            gameclip = false;
+        }
+
+        void reassign()
+        {
+            state.reassign();
+            events.deletecontents();
+            timesync = false;
+            lastevent = 0;
+        }
+
+        void cleanclipboard(bool fullclean = true)
+        {
+            if(clipboard) { if(--clipboard->referenceCount <= 0) enet_packet_destroy(clipboard); clipboard = NULL; }
+            if(fullclean) lastclipboard = 0;
+        }
+
+        void cleanauthkick()
+        {
+            authkickvictim = -1;
+            DELETEA(authkickreason);
+        }
+
+        void cleanauth(bool full = true)
+        {
+            authreq = 0;
+            if(authchallenge) { freechallenge(authchallenge); authchallenge = NULL; }
+            if(full) cleanauthkick();
+        }
+
+        void reset()
+        {
+            name[0] = team[0] = 0;
+            playermodel = -1;
+            privilege = PRIV_NONE;
+            connected = local = false;
+            connectauth = 0;
+            position.setsize(0);
+            messages.setsize(0);
+            ping = 0;
+            aireinit = 0;
+            needclipboard = 0;
+            cleanclipboard();
+            cleanauth();
+            mapchange();
+        }
+
+        int geteventmillis(int servmillis, int clientmillis)
+        {
+            if(!timesync || (events.empty() && state.waitexpired(servmillis)))
+            {
+                timesync = true;
+                gameoffset = servmillis - clientmillis;
+                return servmillis;
+            }
+            else return gameoffset + clientmillis;
+        }
+    };
+    extern vector<clientinfo *> clients;
+
     extern const char *modename(int n, const char *unknown = "unknown");
     extern const char *mastermodename(int n, const char *unknown = "unknown");
     extern void startintermission();
diff --git src/fpsgame/server.cpp src/fpsgame/server.cpp
index 6256cd4..7d25726 100644
--- src/fpsgame/server.cpp
+++ src/fpsgame/server.cpp
@@ -26,151 +26,6 @@ namespace server
         bool spawned;
     };

-    static const int DEATHMILLIS = 300;
-
-    struct clientinfo;
-
-    struct gameevent
-    {
-        virtual ~gameevent() {}
-
-        virtual bool flush(clientinfo *ci, int fmillis);
-        virtual void process(clientinfo *ci) {}
-
-        virtual bool keepable() const { return false; }
-    };
-
-    struct timedevent : gameevent
-    {
-        int millis;
-
-        bool flush(clientinfo *ci, int fmillis);
-    };
-
-    struct hitinfo
-    {
-        int target;
-        int lifesequence;
-        int rays;
-        float dist;
-        vec dir;
-    };
-
-    struct shotevent : timedevent
-    {
-        int id, gun;
-        vec from, to;
-        vector<hitinfo> hits;
-
-        void process(clientinfo *ci);
-    };
-
-    struct explodeevent : timedevent
-    {
-        int id, gun;
-        vector<hitinfo> hits;
-
-        bool keepable() const { return true; }
-
-        void process(clientinfo *ci);
-    };
-
-    struct suicideevent : gameevent
-    {
-        void process(clientinfo *ci);
-    };
-
-    struct pickupevent : gameevent
-    {
-        int ent;
-
-        void process(clientinfo *ci);
-    };
-
-    template <int N>
-    struct projectilestate
-    {
-        int projs[N];
-        int numprojs;
-
-        projectilestate() : numprojs(0) {}
-
-        void reset() { numprojs = 0; }
-
-        void add(int val)
-        {
-            if(numprojs>=N) numprojs = 0;
-            projs[numprojs++] = val;
-        }
-
-        bool remove(int val)
-        {
-            loopi(numprojs) if(projs[i]==val)
-            {
-                projs[i] = projs[--numprojs];
-                return true;
-            }
-            return false;
-        }
-    };
-
-    struct gamestate : fpsstate
-    {
-        vec o;
-        int state, editstate;
-        int lastdeath, deadflush, lastspawn, lifesequence;
-        int lastshot;
-        projectilestate<8> rockets, grenades;
-        int frags, flags, deaths, teamkills, shotdamage, damage, tokens;
-        int lasttimeplayed, timeplayed;
-        float effectiveness;
-
-        gamestate() : state(CS_DEAD), editstate(CS_DEAD), lifesequence(0) {}
-
-        bool isalive(int gamemillis)
-        {
-            return state==CS_ALIVE || (state==CS_DEAD && gamemillis - lastdeath <= DEATHMILLIS);
-        }
-
-        bool waitexpired(int gamemillis)
-        {
-            return gamemillis - lastshot >= gunwait;
-        }
-
-        void reset()
-        {
-            if(state!=CS_SPECTATOR) state = editstate = CS_DEAD;
-            maxhealth = 100;
-            rockets.reset();
-            grenades.reset();
-
-            timeplayed = 0;
-            effectiveness = 0;
-            frags = flags = deaths = teamkills = shotdamage = damage = tokens = 0;
-
-            lastdeath = 0;
-
-            respawn();
-        }
-
-        void respawn()
-        {
-            fpsstate::respawn();
-            o = vec(-1e10f, -1e10f, -1e10f);
-            deadflush = 0;
-            lastspawn = -1;
-            lastshot = 0;
-            tokens = 0;
-        }
-
-        void reassign()
-        {
-            respawn();
-            rockets.reset();
-            grenades.reset();
-        }
-    };
-
     struct savedscore
     {
         uint ip;
@@ -204,158 +59,6 @@ namespace server
         }
     };

-    extern int gamemillis, nextexceeded;
-
-    struct clientinfo
-    {
-        int clientnum, ownernum, connectmillis, sessionid, overflow;
-        string name, team, mapvote;
-        int playermodel;
-        int modevote;
-        int privilege;
-        bool connected, local, timesync;
-        int gameoffset, lastevent, pushed, exceeded;
-        gamestate state;
-        vector<gameevent *> events;
-        vector<uchar> position, messages;
-        uchar *wsdata;
-        int wslen;
-        vector<clientinfo *> bots;
-        int ping, aireinit;
-        string clientmap;
-        int mapcrc;
-        bool warned, gameclip;
-        ENetPacket *getdemo, *getmap, *clipboard;
-        int lastclipboard, needclipboard;
-        int connectauth;
-        uint authreq;
-        string authname, authdesc;
-        void *authchallenge;
-        int authkickvictim;
-        char *authkickreason;
-
-        clientinfo() : getdemo(NULL), getmap(NULL), clipboard(NULL), authchallenge(NULL), authkickreason(NULL) { reset(); }
-        ~clientinfo() { events.deletecontents(); cleanclipboard(); cleanauth(); }
-
-        void addevent(gameevent *e)
-        {
-            if(state.state==CS_SPECTATOR || events.length()>100) delete e;
-            else events.add(e);
-        }
-
-        enum
-        {
-            PUSHMILLIS = 3000
-        };
-
-        int calcpushrange()
-        {
-            ENetPeer *peer = getclientpeer(ownernum);
-            return PUSHMILLIS + (peer ? peer->roundTripTime + peer->roundTripTimeVariance : ENET_PEER_DEFAULT_ROUND_TRIP_TIME);
-        }
-
-        bool checkpushed(int millis, int range)
-        {
-            return millis >= pushed - range && millis <= pushed + range;
-        }
-
-        void scheduleexceeded()
-        {
-            if(state.state!=CS_ALIVE || !exceeded) return;
-            int range = calcpushrange();
-            if(!nextexceeded || exceeded + range < nextexceeded) nextexceeded = exceeded + range;
-        }
-
-        void setexceeded()
-        {
-            if(state.state==CS_ALIVE && !exceeded && !checkpushed(gamemillis, calcpushrange())) exceeded = gamemillis;
-            scheduleexceeded();
-        }
-
-        void setpushed()
-        {
-            pushed = max(pushed, gamemillis);
-            if(exceeded && checkpushed(exceeded, calcpushrange())) exceeded = 0;
-        }
-
-        bool checkexceeded()
-        {
-            return state.state==CS_ALIVE && exceeded && gamemillis > exceeded + calcpushrange();
-        }
-
-        void mapchange()
-        {
-            mapvote[0] = 0;
-            modevote = INT_MAX;
-            state.reset();
-            events.deletecontents();
-            overflow = 0;
-            timesync = false;
-            lastevent = 0;
-            exceeded = 0;
-            pushed = 0;
-            clientmap[0] = '\0';
-            mapcrc = 0;
-            warned = false;
-            gameclip = false;
-        }
-
-        void reassign()
-        {
-            state.reassign();
-            events.deletecontents();
-            timesync = false;
-            lastevent = 0;
-        }
-
-        void cleanclipboard(bool fullclean = true)
-        {
-            if(clipboard) { if(--clipboard->referenceCount <= 0) enet_packet_destroy(clipboard); clipboard = NULL; }
-            if(fullclean) lastclipboard = 0;
-        }
-
-        void cleanauthkick()
-        {
-            authkickvictim = -1;
-            DELETEA(authkickreason);
-        }
-
-        void cleanauth(bool full = true)
-        {
-            authreq = 0;
-            if(authchallenge) { freechallenge(authchallenge); authchallenge = NULL; }
-            if(full) cleanauthkick();
-        }
-
-        void reset()
-        {
-            name[0] = team[0] = 0;
-            playermodel = -1;
-            privilege = PRIV_NONE;
-            connected = local = false;
-            connectauth = 0;
-            position.setsize(0);
-            messages.setsize(0);
-            ping = 0;
-            aireinit = 0;
-            needclipboard = 0;
-            cleanclipboard();
-            cleanauth();
-            mapchange();
-        }
-
-        int geteventmillis(int servmillis, int clientmillis)
-        {
-            if(!timesync || (events.empty() && state.waitexpired(servmillis)))
-            {
-                timesync = true;
-                gameoffset = servmillis - clientmillis;
-                return servmillis;
-            }
-            else return gameoffset + clientmillis;
-        }
-    };
-
     struct ban
     {
         int time, expire;
@@ -2434,11 +2137,22 @@ namespace server
         return true;
     }

+    vector<gameevent *> events;
+
     void clearevent(clientinfo *ci)
     {
         delete ci->events.remove(0);
     }

+    void flushevents()
+    {
+        loopv(events)
+        {
+            gameevent *ev = events[i];
+            if(ev->flush(NULL, totalmillis)) { events.remove(i); i--; }
+        }
+    }
+
     void flushevents(clientinfo *ci, int millis)
     {
         while(ci->events.length())
@@ -2512,6 +2226,7 @@ namespace server
                 if(smode) smode->update();
             }
         }
+        flushevents(); // server events, always based on totalmillis!

         while(bannedips.length() && bannedips[0].expire-totalmillis <= 0) bannedips.remove(0);
         loopv(connects) if(totalmillis-connects[i]->connectmillis>15000) disconnect_client(connects[i]->clientnum, DISC_TIMEOUT);
